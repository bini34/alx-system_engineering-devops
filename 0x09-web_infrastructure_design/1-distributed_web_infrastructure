## task 2 Infrastructure Design:

1. **Web Servers**:
   - Two servers to host the web application.
   - Nginx will serve as the web server to handle incoming HTTP requests.

2. **Load Balancer (HAProxy)**:
   - A load balancer is added to distribute incoming traffic across multiple web servers.
   - HAProxy will balance the load between the two web servers to ensure optimal performance and availability.

3. **Application Server**:
   - One server to run the application codebase.
   - It executes the dynamic code, handles business logic, and interacts with the database.

4. **Application Files (Codebase)**:
   - The application files consist of the PHP codebase that defines the website's functionality.
   - These files will be hosted on the application server and accessed by the web servers when processing user requests.

5. **Database (MySQL)**:
   - MySQL will serve as the database management system.
   - It stores and manages the website's data, such as user accounts, content, etc.
   - A Primary-Replica (Master-Slave) cluster is set up for database replication and fault tolerance.


### Issues with this Infrastructure:

1. **Single Point of Failure (SPOF)**:
   - The load balancer can become a single point of failure if it fails to distribute traffic properly.
   - Lack of redundancy in critical components such as the load balancer and web servers can lead to downtime.

2. **Security Issues**:
   - Lack of firewall configuration exposes the infrastructure to potential security threats.
   - Absence of HTTPS encryption leaves data transmitted between users and the website vulnerable to interception.

3. **No Monitoring**:
   - Without monitoring tools in place, it's challenging to identify and address performance issues, security breaches, or system failures proactively.

## image link

https://lucid.app/lucidchart/a91f7718-fa5e-418d-a31d-2edb72fb44fb/edit?viewport_loc=-846%2C-885%2C3935%2C1808%2C0_0&invitationId=inv_fd670065-ff6f-4580-a06b-22559ed634ff

